{"version":3,"sources":["components/SearchBook.js","components/BookCard.js","components/BookList.js","services/BookService.js","App.js","serviceWorker.js","index.js"],"names":["SearchBook","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","_this2","react_default","a","createElement","InputGroup","Input","placeholder","value","onChange","event","onInputChange","target","InputGroupAddon","addonType","Button","color","onClick","onClickSearch","setState","onSearchQueryChange","Component","BookCard","authors","book","volumeInfo","map","author","className","key","Card","CardImg","top","width","src","imageLinks","smallThumbnail","alt","CardBody","CardHeader","title","CardTitle","CardSubtitle","publisher","CardText","dangerouslySetInnerHTML","__html","searchInfo","textSnippet","CardLink","href","infoLink","BookList","bookList","books","Col","md","etag","src_components_BookCard","Row","BookService","request","concat","response","JSON","parse","items","App","bookSearch","_","term","Navbar","light","expand","NavbarBrand","NavbarToggler","toggle","Collapse","isOpen","navbar","Container","xs","components_SearchBook","components_BookList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25806ac5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Input from \"reactstrap/es/Input\";\nimport {Button, InputGroup, InputGroupAddon} from \"reactstrap\";\n\nclass SearchBook extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {query: ''}\n  }\n\n  render() {\n    return (\n      <div>\n        <InputGroup>\n          <Input placeholder=\"Search...\" value={this.state.query}\n                 onChange={event => this.onInputChange(event.target.value)}/>\n          <InputGroupAddon addonType=\"append\">\n            <Button color=\"secondary\"\n                    onClick={() => this.onClickSearch(this.state.query)}>Search</Button></InputGroupAddon>\n        </InputGroup>\n      </div>\n    );\n  }\n\n  onInputChange(query) {\n    this.setState({query});\n  }\n\n  onClickSearch(query){\n    this.props.onSearchQueryChange(query);\n  }\n}\n\nexport default SearchBook;\n","import React, {Component} from \"react\";\nimport {Card, CardBody, CardHeader, CardImg, CardLink, CardSubtitle, CardText, CardTitle} from \"reactstrap\";\nimport './BookCard.css';\n\nclass BookCard extends Component {\n\n  render() {\n    let authors = [];\n    if (this.props.book.volumeInfo.authors) {\n      authors = this.props.book.volumeInfo.authors.map((author) => {\n        return (\n          <span className=\"author\" key={author}>\n            &nbsp;*&nbsp;{author}\n          </span>\n        )\n      });\n\n    }\n    return (\n      <Card>\n        <CardImg top width=\"100%\"\n                 src={this.props.book.volumeInfo.imageLinks ? this.props.book.volumeInfo.imageLinks.smallThumbnail : this.props.book.volumeInfo.imageLinks}\n                 alt=\"{this.props.book.volumeInfo.title}\"/>\n        <CardBody className=\"text-center\">\n          <CardHeader>\n            {this.props.book.volumeInfo.title}\n          </CardHeader>\n          <CardTitle>\n            {authors}\n          </CardTitle>\n          <CardSubtitle className=\"publisher\">\n            {this.props.book.volumeInfo.publisher}\n          </CardSubtitle>\n          <CardText>\n            <span dangerouslySetInnerHTML={{\n              __html: this.props.book.searchInfo ? this.props.book.searchInfo.textSnippet : this.props.book.volumeInfo.title\n            }}/>\n          </CardText>\n          <CardLink href={this.props.book.volumeInfo.infoLink}>more details</CardLink>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default BookCard;\n","import React, {Component} from \"react\";\nimport BookCard from \"./BookCard\";\nimport {Col, Row} from \"reactstrap\";\n\nclass BookList extends Component {\n  render() {\n    const bookList = this.props.books.map((book) => {\n      return (\n        <Col md=\"3\" key={book.etag}>\n          <BookCard book={book} key={book.etag}/>\n        </Col>\n      );\n    });\n\n    return (\n      <Row>\n        {bookList}\n      </Row>\n    );\n  }\n}\n\nexport default BookList;\n","import * as request from \"request-promise\";\n\nconst API_KEY = '&key=AIzaSyAuGFxAZHq0gltWjTqNP1AtdIjFytwKwG0';\nconst BASE_URL = 'https://www.googleapis.com/books/v1/volumes?q=';\n\nclass BookService {\n\n  static async bookSearch(query) {\n    if (query) {\n      try {\n        const response = await request.get(`${BASE_URL}${query}&projection=lite${API_KEY}`);\n        return JSON.parse(response).items;\n      } catch {\n        return []\n      }\n    } else {\n      return [];\n    }\n  }\n\n}\n\nexport default BookService;\n","import React, {Component} from 'react';\nimport SearchBook from './components/SearchBook'\nimport BookList from \"./components/BookList\";\nimport * as _ from 'lodash';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Col, Collapse, Container, Navbar, NavbarBrand, NavbarToggler, Row} from 'reactstrap';\nimport BookService from './services/BookService';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      query: 'React'\n    };\n\n    this.bookSearch(this.state.query);\n  }\n\n  async bookSearch(query) {\n    const books = await BookService.bookSearch(query);\n    this.setState({books});\n  }\n\n  render() {\n    const bookSearch = _.debounce(term => {\n      this.bookSearch(term)\n    }, 300);\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">alexandria</NavbarBrand>\n          <NavbarToggler onClick={this.toggle}/>\n          <Collapse isOpen={this.state.isOpen} navbar>\n          </Collapse>\n        </Navbar>\n        <Container className=\"align-content-center\">\n          <Row>\n            <Col xs=\"12\" className=\"m-2\">\n              <SearchBook className=\"header\" onSearchQueryChange={\n                (term) => {\n                  bookSearch(term);\n                  this.setState({query: term});\n                }}/>\n            </Col>\n          </Row>\n          <BookList className=\"m-2 align-content-center\" books={this.state.books}/>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}